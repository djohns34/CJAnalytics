package edu.calpoly.codastjegga.cjanalyticsapp.chart.settings;

import android.app.LoaderManager.LoaderCallbacks;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.CursorLoader;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.util.Log;



/**
 * This class in the interface by which the application accesses/modifies the persisted chart settings.
 */
public class ChartSettingsProvider extends ContentProvider {

  // database
  private SQLiteOpenHelper database;

  //The URI mapping by which to reference content providers in this app.
  static final String AUTHORITY = "edu.calpoly.codastjegga.cjanalyticsapp.chart.contentprovider";

  //addition to the URI above, just in case we want more content providers.
  static final String BASE_PATH = "settings";

  //Combo of the above two.
  static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY
      + "/" + BASE_PATH);
  
  //SQL where clauses
  static final String ROWID_EQUALS =ChartSettingsDB.KEY_ROWID+"= ? ";
  static final String DB_EQUALS =ChartSettingsDB.DATABASE+"= ? ";

  @Override
  public boolean onCreate() {
    database = new ChartSettingsDB.DatabaseHelper(getContext());
    return true;
  }

  @Override
  public Cursor query(Uri uri, String[] projection, String selection,
      String[] selectionArgs, String sortOrder) {

    // Uisng SQLiteQueryBuilder instead of query() method
    SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();

    // Set the table
    queryBuilder.setTables(ChartSettingsDB.DATABASE_TABLE);

    SQLiteDatabase db = database.getWritableDatabase();
    Cursor cursor = queryBuilder.query(db, projection, selection,
        selectionArgs, null, null, sortOrder);

    // Make sure that potential listeners are getting notified
    cursor.setNotificationUri(getContext().getContentResolver(), uri);

    return cursor;
  }

  @Override
  public String getType(Uri uri) {
    return null;
  }

  @Override
  public Uri insert(Uri uri, ContentValues values) {
    SQLiteDatabase sqlDB = database.getWritableDatabase();
    long id =  sqlDB.insert(ChartSettingsDB.DATABASE_TABLE, null, values);

    if(id>-1){
      //Things need to update
      getContext().getContentResolver().notifyChange(uri, null);
    }else{
      Log.e("insert", "Error Inserting into database");
    }
    return Uri.parse(BASE_PATH + "/" + id);
  }

  @Override
  public int delete(Uri uri, String selection, String[] selectionArgs) {

    
    SQLiteDatabase sqlDB = database.getWritableDatabase();

    //delete the specified row
    int rowsDeleted = sqlDB.delete(ChartSettingsDB.DATABASE_TABLE,selection, selectionArgs);

    if(rowsDeleted>0){
      //Things need to update
      getContext().getContentResolver().notifyChange(uri, null);
    }else{
        Log.e("delete", "Error deleting from database");
    }
    return rowsDeleted;
  }

  @Override
  public int update(Uri uri, ContentValues values, String selection,
      String[] selectionArgs) {

    SQLiteDatabase sqlDB = database.getWritableDatabase();

    int rowsUpdated = sqlDB.update(ChartSettingsDB.DATABASE_TABLE, values,
        selection, selectionArgs);

    if(rowsUpdated>0){
      //Things need to update
      getContext().getContentResolver().notifyChange(uri, null);
    }else{
      Log.e("update", "Error updating in database");
  }

    return rowsUpdated;
  }
  
  /**
   * Combined the update and insert methods into one. This method will determine
   * if the passed in settings need to be inserted or updated.
   * 
   * @param resolver the ContentResolver of the activity calling the method
   * @param settings The {@link ChartSettings} to save
   */
  public static final void saveSettings(ContentResolver resolver,ChartSettings settings){
    ContentValues values = ChartSettingsDB.buildQueryValues(settings);
    Integer androidID=settings.getAndroidID();

    //We need to insert it into the database. 
    if(androidID.equals(ChartSettings.NOT_PERSISTED)){
      //Get rid of it since it is generated by the DB
      values.remove(ChartSettingsDB.KEY_ROWID);
      
      //Get the id that resulted from the insert
      Uri res = resolver.insert(CONTENT_URI, values);
      androidID=Integer.parseInt(res.getLastPathSegment());
      
      //Set it on the object passed in so, if save is called again it isn't inserted.
      settings.setAndroidID(androidID);
    } else {
      resolver.update(CONTENT_URI, values, ROWID_EQUALS,
          new String[] { androidID.toString()});
    }
  }
  
  /**
   * Calls the delete method of the content provider.
   * Helper method to build the required arguments.
   * 
   * @param resolver the ContentResolver of the activity calling the method
   * @param id the row id of the setting to delete.
   */
  public static final int delete(ContentResolver resolver, Integer id){
    return resolver.delete(CONTENT_URI, ROWID_EQUALS, new String[]{id.toString()});
  }
  
  /**
   * Helper method to create a CursorLoader
   * @param activity the activity calling this method.
   * @param database The database (app) that we want the metrics of. Null means you want all of the settings.
   * @return the CursorLoader to be used in a {@link LoaderCallbacks}.
   */
  public static final CursorLoader getCursorLoader(Context activity,String database) {
    String selection=null;
    String[] selectionArgs=null;
    if(database!=null){
      selection=DB_EQUALS;
      selectionArgs=new String[]{database};
    }
    
    return  new CursorLoader(activity,CONTENT_URI, ChartSettingsDB.allColumns, selection, selectionArgs, null);
  }
  
  /**
   * 
   * @see ChartSettingsDB.getChartSetting
   * @param cursor
   * @return
   */
  public static final  ChartSettings getChartSettings(Cursor cursor) {
    return ChartSettingsDB.getChartSettings(cursor);
  }
}